<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/cache
     http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
     http://www.springframework.org/schema/redis
     http://www.springframework.org/schema/redis/spring-redis-1.0.xsd">
<!--    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>-->

    <!-- jedis 配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="1" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="100" />
        <property name="maxWaitMillis" value="1000" />
        <!-- 在获取连接的时候检查有效性 -->
        <property name="testOnBorrow" value="false" />
    </bean>

    <!-- redis服务器中心 -->
    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig" />
        <property name="port" value="6379" />
        <property name="hostName" value="127.0.0.1" />
        <property name="password" value="" />
        <property name="timeout" value="10000" />
        <property name="database" value="0" />
    </bean>


    <!-- redis操作模板，面向对象的模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory" />
        <!-- 将key和value序列化后存入redis，读取时再进行反序列化 -->
        <!-- 对key的默认序列化器 -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
            <!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        </property>
        <!-- 对value的默认序列化器 -->
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <!-- 对hash结构数据的hashkey的默认序列化器 -->
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <!-- 对hash结构数据的hashvalue的默认序列化器 -->
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <!--        <property name="keySerializer">-->
        <!--                <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--        </property>-->
        <!--        <property name="valueSerializer">-->
        <!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--        </property>-->
        <!--        <property name="hashKeySerializer">-->
        <!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--        </property>-->
        <!--        <property name="hashValueSerializer">-->
        <!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--        </property> -->
    </bean>

</beans>
